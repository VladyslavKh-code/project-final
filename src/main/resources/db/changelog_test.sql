        --liquibase formatted sql

--changeset kmpk:init_schema
drop table if exists user_role;
drop table if exists contact;
drop table if exists mail_case;
drop sequence if exists mail_case_id_seq;
drop table if exists profile;
drop table if exists task_tag;
drop table if exists user_belong;
drop sequence if exists user_belong_id_seq;
drop table if exists activity;
drop sequence if exists activity_id_seq;
drop table if exists task;
drop sequence if exists task_id_seq;
drop table if exists sprint;
drop sequence if exists sprint_id_seq;
drop table if exists project;
drop sequence if exists project_id_seq;
drop table if exists reference;
drop sequence if exists reference_id_seq;
drop table if exists attachment;
drop sequence if exists attachment_id_seq;
drop table if exists users;
drop sequence if exists users_id_seq;

create table project
(
    id bigint generated by default as identity primary key,
    code        varchar(32)   not null
        constraint uk_project_code unique,
    title       varchar(1024) not null,
    description varchar(4096) not null,
    type_code   varchar(32)   not null,
    startpoint  timestamp,
    endpoint    timestamp,
    parent_id   bigint,
    constraint fk_project_parent foreign key (parent_id) references project (id) on delete cascade
);

create table mail_case
(
    id bigint generated by default as identity primary key,
    email     varchar(255) not null,
    name      varchar(255) not null,
    date_time timestamp    not null,
    result    varchar(255) not null,
    template  varchar(255) not null
);

create table sprint
(
    id bigint generated by default as identity primary key,
    status_code varchar(32)   not null,
    startpoint  timestamp,
    endpoint    timestamp,
    code        varchar(1024) not null,
    project_id  bigint        not null,
    constraint fk_sprint_project foreign key (project_id) references project (id) on delete cascade
);

create table reference
(
    id bigint generated by default as identity primary key,
    code       varchar(32)   not null,
    ref_type   smallint      not null,
    endpoint   timestamp,
    startpoint timestamp,
    title      varchar(1024) not null,
    aux        varchar,
    constraint uk_reference_ref_type_code unique (ref_type, code)
);

create table users
(
    id bigint generated by default as identity primary key,
    display_name varchar(32)  not null
        constraint uk_users_display_name unique,
    email        varchar(128) not null
        constraint uk_users_email unique,
    first_name   varchar(32)  not null,
    last_name    varchar(32),
    password     varchar(128) not null,
    endpoint     timestamp,
    startpoint   timestamp
);

create table profile
(
    id                 bigint primary key,
    last_login         timestamp,
    last_failed_login  timestamp,
    mail_notifications bigint,
    constraint fk_profile_users foreign key (id) references users (id) on delete cascade
);

CREATE TABLE contact (
                         id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         code VARCHAR(32) NOT NULL,
                         worth VARCHAR(256) NOT NULL,
                         CONSTRAINT fk_contact_profile FOREIGN KEY (id) REFERENCES profile (id) ON DELETE CASCADE
);

create table task
(
    id bigint generated by default as identity primary key,
    title         varchar(1024) not null,
    type_code     varchar(32)   not null,
    status_code   varchar(32)   not null,
    project_id    bigint        not null,
    sprint_id     bigint,
    parent_id     bigint,
    startpoint    timestamp,
    endpoint      timestamp,
    constraint fk_task_sprint foreign key (sprint_id) references sprint (id) on delete set null,
    constraint fk_task_project foreign key (project_id) references project (id) on delete cascade,
    constraint fk_task_parent_task foreign key (parent_id) references task (id) on delete cascade
);

create table activity
(
    id bigint generated by default as identity primary key,
    author_id     bigint not null,
    task_id       bigint not null,
    updated       timestamp,
    comment       varchar(4096),
    title         varchar(1024),
    description   varchar(4096),
    estimate      integer,
    type_code     varchar(32),
    status_code   varchar(32),
    priority_code varchar(32),
    constraint fk_activity_users foreign key (author_id) references users (id),
    constraint fk_activity_task foreign key (task_id) references task (id) on delete cascade
);

create table task_tag
(
    task_id bigint      not null,
    tag     varchar(32) not null,
    constraint uk_task_tag unique (task_id, tag),
    constraint fk_task_tag foreign key (task_id) references task (id) on delete cascade
);

create table user_belong
(
    id bigint generated by default as identity primary key,
    object_id      bigint      not null,
    object_type    smallint    not null,
    user_id        bigint      not null,
    user_type_code varchar(32) not null,
    startpoint     timestamp,
    endpoint       timestamp,
    constraint fk_user_belong foreign key (user_id) references users (id)
);

create unique index uk_user_belong on user_belong (object_id, object_type, user_id, user_type_code);
create index ix_user_belong_user_id on user_belong (user_id);

create table attachment
(
    id bigint generated by default as identity primary key,
    name        varchar(128)  not null,
    file_link   varchar(2048) not null,
    object_id   bigint        not null,
    object_type smallint      not null,
    user_id     bigint        not null,
    date_time   timestamp,
    constraint fk_attachment foreign key (user_id) references users (id)
);

create table user_role
(
    user_id bigint   not null,
    role    smallint not null,
    constraint uk_user_role unique (user_id, role),
    constraint fk_user_role foreign key (user_id) references users (id) on delete cascade
);


--changeset kmpk:populate_data
--============ References =================
insert into reference (code, title, ref_type)
-- task
values ('task', 'Task', 2),
       ('story', 'Story', 2),
       ('bug', 'Bug', 2),
       ('epic', 'Epic', 2),
-- sprint_status
       ('planning', 'Planning', 4),
       ('active', 'Active', 4),
       ('finished', 'Finished', 4),
-- user_type
       ('author', 'Author', 5),
       ('developer', 'Developer', 5),
       ('reviewer', 'Reviewer', 5),
       ('tester', 'Tester', 5),
-- project
       ('scrum', 'Scrum', 1),
       ('task_tracker', 'Task tracker', 1),
-- contact
       ('skype', 'Skype', 0),
       ('tg', 'Telegram', 0),
       ('mobile', 'Mobile', 0),
       ('phone', 'Phone', 0),
       ('website', 'Website', 0),
       ('vk', 'VK', 0),
       ('linkedin', 'LinkedIn', 0),
       ('github', 'GitHub', 0),
-- priority
       ('critical', 'Critical', 7),
       ('high', 'High', 7),
       ('normal', 'Normal', 7),
       ('low', 'Low', 7),
       ('neutral', 'Neutral', 7);

insert into reference (code, title, ref_type, aux)
-- mail_notification
values ('assigned', 'Assigned', 6, '1'),
       ('three_days_before_deadline', 'Three days before deadline', 6, '2'),
       ('two_days_before_deadline', 'Two days before deadline', 6, '4'),
       ('one_day_before_deadline', 'One day before deadline', 6, '8'),
       ('deadline', 'Deadline', 6, '16'),
       ('overdue', 'Overdue', 6, '32'),
-- task_status
       ('todo', 'ToDo', 3, 'in_progress,canceled'),
       ('in_progress', 'In progress', 3, 'ready_for_review,canceled'),
       ('ready_for_review', 'Ready for review', 3, 'review,canceled'),
       ('review', 'Review', 3, 'in_progress,ready_for_test,canceled'),
       ('ready_for_test', 'Ready for test', 3, 'test,canceled'),
       ('test', 'Test', 3, 'done,in_progress,canceled'),
       ('done', 'Done', 3, 'canceled'),
       ('canceled', 'Canceled', 3, null);

--changeset gkislin:change_backtracking_tables

-- зміна типу стовпця
alter table sprint alter column code varchar(32);

-- встановлення обов'язкового значення (not null)
alter table sprint alter column code set not null;

-- створення унікального індексу
create unique index uk_sprint_project_code on sprint (project_id, code);

--changeset ishlyakhtenkov:change_task_status_reference

delete
from reference
where ref_type = 3;
insert into reference (code, title, ref_type, aux)
values ('todo', 'ToDo', 3, 'in_progress,canceled'),
       ('in_progress', 'In progress', 3, 'ready_for_review,canceled'),
       ('ready_for_review', 'Ready for review', 3, 'in_progress,review,canceled'),
       ('review', 'Review', 3, 'in_progress,ready_for_test,canceled'),
       ('ready_for_test', 'Ready for test', 3, 'review,test,canceled'),
       ('test', 'Test', 3, 'done,in_progress,canceled'),
       ('done', 'Done', 3, 'canceled'),
       ('canceled', 'Canceled', 3, null);

--changeset gkislin:users_add_on_delete_cascade

alter table activity drop constraint fk_activity_users;

alter table activity add constraint fk_activity_users foreign key (author_id) references users (id) on delete cascade;

alter table user_belong drop constraint fk_user_belong;

alter table user_belong add constraint fk_user_belong foreign key (user_id) references users (id) on delete cascade;

alter table attachment drop constraint fk_attachment;

alter table attachment add constraint fk_attachment foreign key (user_id) references users (id) on delete cascade;

--changeset valeriyemelyanov:change_user_type_reference

delete
from reference
where ref_type = 5;
insert into reference (code, title, ref_type)
-- user_type
values ('project_author', 'Author', 5),
       ('project_manager', 'Manager', 5),
       ('sprint_author', 'Author', 5),
       ('sprint_manager', 'Manager', 5),
       ('task_author', 'Author', 5),
       ('task_developer', 'Developer', 5),
       ('task_reviewer', 'Reviewer', 5),
       ('task_tester', 'Tester', 5);

--changeset apolik:refactor_reference_aux

-- task_type
delete
from reference
where ref_type = 3;
insert into reference (code, title, ref_type, aux)
values ('todo', 'ToDo', 3, 'in_progress,canceled|'),
       ('in_progress', 'In progress', 3, 'ready_for_review,canceled|task_developer'),
       ('ready_for_review', 'Ready for review', 3, 'in_progress,review,canceled|'),
       ('review', 'Review', 3, 'in_progress,ready_for_test,canceled|task_reviewer'),
       ('ready_for_test', 'Ready for test', 3, 'review,test,canceled|'),
       ('test', 'Test', 3, 'done,in_progress,canceled|task_tester'),
       ('done', 'Done', 3, 'canceled|'),
       ('canceled', 'Canceled', 3, null);

--changeset ishlyakhtenkov:change_uk_user_belong

drop index uk_user_belong;
create unique index uk_user_belong on user_belong (object_id, object_type, user_id, user_type_code, startpoint, endpoint);

//delete from user_belong;
delete from user_role;
delete from activity;
delete from task;
delete from sprint;
delete from project;
delete from contact;
delete from users;

-- Скидання identity
//alter table user_belong alter column id restart with 1;
alter table user_role alter column user_id restart with 1;
alter table activity alter column id restart with 1;
alter table task alter column id restart with 1;
alter table sprint alter column id restart with 1;
alter table project alter column id restart with 1;
alter table contact alter column id restart with 1;
alter table users alter column id restart with 1;

insert into users (email, password, first_name, last_name, display_name)
values ('user@gmail.com', '{noop}password', 'userFirstName', 'userLastName', 'userDisplayName'),
       ('admin@gmail.com', '{noop}admin', 'adminFirstName', 'adminLastName', 'adminDisplayName'),
       ('guest@gmail.com', '{noop}guest', 'guestFirstName', 'guestLastName', 'guestDisplayName'),
       ('manager@gmail.com', '{noop}manager', 'managerFirstName', 'managerLastName', 'managerDisplayName');

insert into user_role (user_id, role)
values (1, 0),
       (2, 0),
       (2, 1),
       (4, 2);

insert into profile (id, last_failed_login, last_login, mail_notifications)
values (1, null, null, 49),
       (2, null, null, 14);



insert into project (code, title, description, type_code, parent_id)
values ('PR1', 'PROJECT-1', 'test project 1', 'task_tracker', null),
       ('PR2', 'PROJECT-2', 'test project 2', 'task_tracker', 1);

insert into sprint (status_code, startpoint, endpoint, code, project_id)
values ('finished', '2023-05-01 08:05:10', '2023-05-07 17:10:01', 'SP-1.001', 1),
       ('active', '2023-05-01 08:06:00', null, 'SP-1.002', 1),
       ('active', '2023-05-01 08:07:00', null, 'SP-1.003', 1),
       ('planning', '2023-05-01 08:08:00', null, 'SP-1.004', 1),
       ('active', '2023-05-10 08:06:00', null, 'SP-2.001', 2),
       ('planning', '2023-05-10 08:07:00', null, 'SP-2.002', 2),
       ('planning', '2023-05-10 08:08:00', null, 'SP-2.003', 2);

insert into task (title, type_code, status_code, project_id, sprint_id, startpoint)
values ('Data', 'epic', 'in_progress', 1, 1, '2023-05-15 09:05:10'),
       ('Trees', 'epic', 'in_progress', 1, 1, '2023-05-15 12:05:10'),
       ('task-3', 'task', 'ready_for_test', 2, 5, '2023-06-14 09:28:10'),
       ('task-4', 'task', 'ready_for_review', 2, 5, '2023-06-14 09:28:10'),
       ('task-5', 'task', 'todo', 2, 5, '2023-06-14 09:28:10'),
       ('task-6', 'task', 'done', 2, 5, '2023-06-14 09:28:10'),
       ('task-7', 'task', 'canceled', 2, 5, '2023-06-14 09:28:10');

INSERT INTO contact (id, code, worth)
VALUES
    (1, 'skype', 'userSkype'),
    (2, 'github', 'adminGitHub');

insert into activity (author_id, task_id, updated, comment, title, description, estimate, type_code, status_code,
                      priority_code)
values (1, 1, '2023-05-15 09:05:10', null, 'Data', null, 3, 'epic', 'in_progress', 'low'),
       (2, 1, '2023-05-15 12:25:10', null, 'Data', null, null, null, null, 'normal'),
       (1, 1, '2023-05-15 14:05:10', null, 'Data', null, 4, null, null, null),
       (1, 2, '2023-05-15 12:05:10', null, 'Trees', 'Trees desc', 4, 'epic', 'in_progress', 'normal');

        insert into USER_BELONG (OBJECT_ID, OBJECT_TYPE, USER_ID, USER_TYPE_CODE, STARTPOINT, ENDPOINT)
        values (1, 2, 2, 'task_developer', '2023-06-14 08:35:10', '2023-06-14 08:55:00'),
               (1, 2, 2, 'task_reviewer', '2023-06-14 09:35:10', null),
               (1, 2, 1, 'task_developer', '2023-06-12 11:40:00', '2023-06-12 12:35:00'),
               (1, 2, 1, 'task_developer', '2023-06-13 12:35:00', null),
               (1, 2, 1, 'task_tester', '2023-06-14 15:20:00', null),
               (2, 2, 2, 'task_developer', '2023-06-08 07:10:00', null),
               (2, 2, 1, 'task_developer', '2023-06-09 14:48:00', null),
               (2, 2, 1, 'task_tester', '2023-06-10 16:37:00', null);
